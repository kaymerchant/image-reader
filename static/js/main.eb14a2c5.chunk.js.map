{"version":3,"sources":["ImageLoad.module.css","ImageLoad.js","ComputerVision.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","imageLoader","props","className","classes","MainClass","ContentContainer","PreviewImage","src","imageInfo","image","imagePreview","type","onChange","imageUpload","defaultStatus","disabled","loading","onClick","extractText","rows","cols","value","detectedText","detectedTextLanguage","ComputerVision","state","selectedFile","imageSize","isValid","imageData","languageOptions","uplaodImage","event","imageInformation","target","files","undefined","setState","size","indexOf","imageSrc","URL","createObjectURL","getLanguage","Axios","get","then","response","data","getText","imageDetails","FormData","append","post","map","lang","languageID","language","languageName","toUpperCase","ImageLoad","this","Component","App","document","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb14a2c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainClass\":\"ImageLoad_MainClass__3UA6w\",\"ContentContainer\":\"ImageLoad_ContentContainer__1FBqT\",\"PreviewImage\":\"ImageLoad_PreviewImage__34dBP\"};","import React from 'react';\r\nimport classes from '../src/ImageLoad.module.css'\r\n\r\nconst imageLoader = (props) => {\r\n    return (\r\n        <div className={classes.MainClass}>\r\n        <h2>Quote Reader</h2>\r\n        <h3>Upload an image and convert in into text</h3>\r\n            <div className={classes.ContentContainer}>\r\n                <img className={classes.PreviewImage} src={props.imageInfo.image}/>\r\n                <h1>{props.imageInfo.imagePreview}</h1>\r\n                <input type=\"file\" onChange={props.imageUpload}/>\r\n                <p>{props.imageInfo.defaultStatus}</p>\r\n                <button disabled={props.imageInfo.loading} onClick={props.extractText}>\r\n                Extract Text\r\n                </button>\r\n             </div>\r\n    <div className={classes.ContentContainer}>\r\n        <textarea disabled type=\"text\" rows=\"20\" cols=\"50\" value={props.imageInfo.detectedText}></textarea>\r\n        <div>\r\n            <label><strong> Detected Language :{props.imageInfo.detectedTextLanguage}</strong></label>\r\n        </div>\r\n    </div>\r\n    </div>\r\n        )\r\n} \r\n\r\nexport default imageLoader;","import React,{Component} from 'react';\r\nimport ImageLoader from '../src/ImageLoad'\r\nimport Axios from 'axios';\r\n\r\nclass ComputerVision extends Component {\r\n    state = {\r\n        loading : true,\r\n        detectedTextLanguage : null,\r\n        selectedFile: null,\r\n        imageSize: 4 * 1024 * 1024,\r\n        defaultStatus: \"Maximum size allowed for the image is 4 MB\",\r\n        isValid: false,\r\n        imageData: null,\r\n        image: null,\r\n        languageOptions: [],\r\n        detectedText: \"Text will be displayed here\"\r\n    }\r\n\r\n    uplaodImage = (event) => {\r\n        let imageInformation = event.target.files[0];\r\n        if(imageInformation === undefined) {\r\n            return;\r\n        }\r\n        else if(this.state.selectedFile !== null && this.state.selectedFile!== imageInformation) {\r\n            this.setState({ image: null, \r\n                isValid : false,\r\n                loading : false,\r\n                selectedFile: null,\r\n            })\r\n        }\r\n\r\n        if(this.state.imageSize < imageInformation.size) {\r\n            this.setState({ defaultStatus: \r\n                `The file size is ${this.state.imageSize} bytes, this is more than the allowed limit of ${imageInformation.size} bytes.`,\r\n            isValid : false})\r\n        }\r\n        else if (imageInformation.type.indexOf('image') === -1) {\r\n            this.setState({defaultStatus:\"Please upload a valid image file\", isValid : false})\r\n        }\r\n        else {\r\n            let imageSrc = URL.createObjectURL(event.target.files[0])\r\n            this.setState({ image: imageSrc, \r\n                isValid : true,\r\n                loading : false,\r\n                selectedFile: imageInformation,\r\n                detectedText:\"..loading\",\r\n                detectedTextLanguage: null})\r\n                this.getLanguage()\r\n        }\r\n    }\r\n\r\n    getLanguage = () => {\r\n        Axios.get(\"https://ngcomputervision20200524213946.azurewebsites.net/api/OCR\")\r\n        .then(response => {\r\n            this.setState({languageOptions: response.data})\r\n        })\r\n    }\r\n\r\n    getText = () => {\r\n       \r\n        let imageDetails = new FormData()\r\n        imageDetails.append('imageDetails', this.state.selectedFile)\r\n        if(this.state.isValid) {\r\n            this.setState({\r\n                imageData: imageDetails\r\n            })          \r\n\r\n           Axios.post(\"https://ngcomputervision20200524213946.azurewebsites.net/api/OCR\", imageDetails)\r\n            .then(response => {\r\n                return (\r\n                    this.state.languageOptions.map(lang => {\r\n                    if(lang.languageID === response.data.language) {\r\n                        this.setState({detectedTextLanguage: lang.languageName.toUpperCase(),\r\n                            detectedText : response.data.detectedText})\r\n                    }\r\n                    else if(this.state.detectedTextLanguage === null) {\r\n                        this.setState({detectedTextLanguage: \"NONE\",\r\n                            detectedText : \"Language not detected. Try again!\"})\r\n                    }\r\n                    })\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ImageLoader \r\n                imageInfo={this.state}\r\n                extractText={this.getText}\r\n                imageUpload={this.uplaodImage}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ComputerVision","import React, { Component } from 'react';\nimport ComputerVision from '../src/ComputerVision'\n\nclass App extends Component {\n  componentDidMount () {\n    document.title = \"Image Reader\"\n  }\n  render () {\n    return (\n      <div>\n        <ComputerVision/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}